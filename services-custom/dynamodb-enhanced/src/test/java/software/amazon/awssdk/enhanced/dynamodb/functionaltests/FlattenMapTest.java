/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.enhanced.dynamodb.functionaltests;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.HashMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.internal.client.ExtensionResolver;
import software.amazon.awssdk.enhanced.dynamodb.mapper.testbeans.flattenmap.FlattenMapValidBean;

public class FlattenMapTest extends LocalDynamoDbSyncTestBase {

    private static final TableSchema<FlattenMapValidBean> TABLE_SCHEMA =
        TableSchema.fromClass(FlattenMapValidBean.class);

    private final DynamoDbEnhancedClient enhancedClient =
        DynamoDbEnhancedClient.builder()
                              .dynamoDbClient(getDynamoDbClient())
                              .extensions(Stream.concat(
                                                    ExtensionResolver.defaultExtensions().stream(),
                                                    Stream.of(AutoGeneratedTimestampRecordExtension.create()))
                                                .collect(Collectors.toList()))
                              .build();

    private final DynamoDbTable<FlattenMapValidBean> mappedTable =
        enhancedClient.table(getConcreteTableName("table-name"), TABLE_SCHEMA);

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void createTable() {
        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
    }

    @After
    public void deleteTable() {
        getDynamoDbClient().deleteTable(r -> r.tableName(getConcreteTableName("table-name")));
    }

    @Test
    public void updateItemWithFlattenMap_correctlyFlattensMapAttributes() {

        //first update
        FlattenMapValidBean record = new FlattenMapValidBean();
        record.setId("111");
        record.setRootAttribute1("rootValue1");
        record.setRootAttribute2("rootValue2");
        record.setAttributesMap(new HashMap<String, String>() {{
            put("mapAttribute1", "mapValue1");
            put("mapAttribute2", "mapValue2");
            put("mapAttribute3", "mapValue3");
        }});

        mappedTable.updateItem(record);

        FlattenMapValidBean persistedRecord = mappedTable.getItem(record);
        assertThat(persistedRecord.getId()).isEqualTo("111");
        assertThat(persistedRecord.getRootAttribute1()).isEqualTo("rootValue1");
        assertThat(persistedRecord.getRootAttribute2()).isEqualTo("rootValue2");
        assertThat(persistedRecord.getAttributesMap()).hasSize(3);
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute1", "mapValue1");
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute2", "mapValue2");
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute3", "mapValue3");


        //second update
        record = new FlattenMapValidBean();
        record.setId("222");
        record.setRootAttribute2("rootValue2_new");
        record.setAttributesMap(new HashMap<String, String>() {{
            put("mapAttribute1", "mapValue1_new");
            put("mapAttribute2", "mapValue2_new");
            put("mapAttribute3", "mapValue3");
        }});

        mappedTable.updateItem(record);

        persistedRecord = mappedTable.getItem(record);
        assertThat(persistedRecord.getId()).isEqualTo("222");
        assertThat(persistedRecord.getRootAttribute1()).isNull();
        assertThat(persistedRecord.getRootAttribute2()).isEqualTo("rootValue2_new");
        assertThat(persistedRecord.getAttributesMap()).hasSize(3);
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute1", "mapValue1_new");
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute2", "mapValue2_new");
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute3", "mapValue3");


        //third update
        record = new FlattenMapValidBean();
        record.setId("333");
        record.setRootAttribute1("rootValue1_new");
        record.setRootAttribute2("rootValue2_new");
        record.setAttributesMap(new HashMap<String, String>() {{
            put("mapAttribute1", "mapValue1_new");
            put("mapAttribute2", "mapValue2_new");
            put("mapAttribute3", "mapValue3_new");
        }});

        mappedTable.updateItem(record);

        persistedRecord = mappedTable.getItem(record);
        assertThat(persistedRecord.getId()).isEqualTo("333");
        assertThat(persistedRecord.getRootAttribute1()).isEqualTo("rootValue1_new");
        assertThat(persistedRecord.getRootAttribute2()).isEqualTo("rootValue2_new");
        assertThat(persistedRecord.getAttributesMap()).hasSize(3);
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute1", "mapValue1_new");
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute2", "mapValue2_new");
        assertThat(persistedRecord.getAttributesMap()).containsEntry("mapAttribute3", "mapValue3_new");


        //fourth update
        record = new FlattenMapValidBean();
        record.setId("444");
        record.setAttributesMap(new HashMap<>());

        mappedTable.updateItem(record);

        persistedRecord = mappedTable.getItem(record);
        assertThat(persistedRecord.getId()).isEqualTo("444");
        assertThat(persistedRecord.getRootAttribute1()).isNull();
        assertThat(persistedRecord.getRootAttribute2()).isNull();
        assertThat(persistedRecord.getAttributesMap()).isNull();
    }

    @Test
    public void updateItemWithFlattenMap_withDuplicateAttributeName_throwsIllegalArgumentException() {
        FlattenMapValidBean record = new FlattenMapValidBean();
        record.setId("123");
        record.setRootAttribute1("rootValue1");
        record.setRootAttribute2("rootValue2");
        record.setAttributesMap(new HashMap<String, String>() {{
            put("mapAttribute1", "mapValue1");
            put("mapAttribute2", "mapValue2");
            put("mapAttribute3", "mapValue3");
            put("id", "newIdValue");
        }});

        assertThatThrownBy(() -> mappedTable.updateItem(record))
            .isInstanceOf(IllegalArgumentException.class)
            .hasMessageContaining("Attempt to add an attribute to a mapper that already has one with the same name. ")
            .hasMessageContaining("[Attribute name: id]");
    }

}